{"version":3,"sources":["assembly/index.ts"],"names":[],"mappings":"0IAoDE,IACA,IACA,AAAS,EAAQ,KACjB,IACA,AAAqB,AAAS,AAAK,EAAL,QAC9B,AAAqB,AAAS,AAAK,EAAL,QAC9B,AAAqB,AAAS,AAAK,EAAL,QAC9B,AAAqB,AAAS,AAAK,EAAL,UAEd,EAAI,KAClB,EAAO,AAAI,cACX,EAAO,AAAY,EAAZ,AAAI,MAAgB,YAFD,WAKvB,AAAQ,MAAG,EAAI,KAClB,aACA,EAAO,EAAO,eAFW,iBAQf,IAAgB,IAAa,IAAQ,IAAY,IAAgB,MAG7D,OAEd,AAAI,AADJ,0DAMA,AAAI,eACM,mCARe,WActB,AAAQ,MAAG,OACd,kCAWE,AADA,AAAU,WAAQ,AAHlB,AAAU,AAAC,AAAC,AAHI,EAAI,YACJ,EAAI,aAEa,GANjC,gBAS0B,IAAK,AAFrB,AAAC,AAAC,AANI,EAAI,YACJ,AAAI,eAKa,MAEM,MAChC,AAAO,KAAwB,gCAZf,WAiBtB,AAAQ,MAAG,OAEd,AADA,wBAvF+E,AAAnE,MAAa,AAAO,MA2Fb,AAFjB,yBACsB,gDA1FuB,EAAI,QAAa,EAAI,8BA4FrD,UAEf,AAAI,6BAtFuE,AAAtE,AAAO,EAAC,AAHf,AAAU,WAAK,KAGO,IAAM,GAAI,AAAC,AAAM,EAAQ,MAAK,EAAQ,IAAM,EAAM,IAAK,UA8ElD","sourceRoot":"assemblyscript:///","sourceContents":["/// <reference path=\"../node_modules/assemblyscript/index.d.ts\" />\n\nclass Pointer {\n  // just need for making tslint happy\n  [key: number]: number;\n\n  constructor(offset: usize = 0) {\n    return changetype<Pointer>(offset);\n  }\n\n  @inline @operator(\"[]\") get(index: i32): i32 {\n    return load<i32>(changetype<usize>(this) + (<usize>index << alignof<i32>()));\n  }\n\n  @inline @operator(\"[]=\") set(index: i32, value: i32): void {\n    store<i32>(changetype<usize>(this) + (<usize>index << alignof<i32>()), value);\n  }\n}\n\n// Full int32 range is -0x80000000 to 0x7FFFFFFF. Use half.\n@inline function applyCap(x: i32): i32 {\n  // return x < -0x40000000 ? -0x40000000 : (x > 0x3FFFFFFF ? 0x3FFFFFFF : x);\n  return select(-0x40000000, select(0x3FFFFFFF, x, x > 0x3FFFFFFF), x < -0x40000000);\n}\n\n@inline function toRGB(x: i32): i32 {\n  // Map negative values to red, positive to blue-green, zero to black\n  var val = x >> 22;\n  // if (val < 0) return ((-(val + 1))  | 0xFF000000); // red\n  // return (((val << 8) | (val << 16)) | 0xFF000000); // cyan\n  return select(-(val + 1) << 16, (val | (val << 8) | (val << 16)), val < 0) | 0xFF000000;\n}\n\nconst STATUS_DEFAULT: i32 = 0;\nconst STATUS_WALL: i32 = 1;\nconst STATUS_POS_TRANSMITTER: i32 = 2;\nconst STATUS_NEG_TRANSMITTER: i32 = 3;\n\nconst FORCE_DAMPING_BIT_SHIFT: i32 = 4;\n\nlet width:  i32 = 0;\nlet height: i32 = 0;\nlet area:   i32 = 0;\n\nlet image:  Pointer;\nlet force:  Pointer;\nlet status: Pointer;\nlet u:      Pointer;\nlet v:      Pointer;\n\nexport function init(_ignored: i32, offset: i32, w: i32, h: i32): void {\n\n  width  = w;\n  height = h;\n  area   = width * height;\n  image  = new Pointer(offset);\n  force  = new Pointer(offset + 4  * area);\n  status = new Pointer(offset + 8  * area);\n  u      = new Pointer(offset + 12 * area);\n  v      = new Pointer(offset + 16 * area);\n\n  for (let i = 0; i < height; ++i) {\n    status[i * width] = 1;\n    status[i * width + width - 1] = STATUS_WALL;\n  }\n\n  for (let i = 0; i < width; ++i) {\n    status[i] = 1;\n    status[area - width + i] = STATUS_WALL;\n  }\n}\n\nexport function step(signalAmplitude: i32, dampingBitShift: i32): void {\n\n  let _area = area, _status = status, _u = u, _v = v, _force = force, _image = image;\n\n  // First loop: look for noise generator pixels and set their values in u\n  for (let i = 0; i < _area; ++i) {\n    let s = _status[i];\n    if (s === STATUS_POS_TRANSMITTER) {\n      _u[i] = signalAmplitude;\n      _v[i] = 0;\n      _force[i] = 0;\n    }\n    if (s === STATUS_NEG_TRANSMITTER) {\n      _u[i] = -signalAmplitude;\n      _v[i] = 0;\n      _force[i] = 0;\n    }\n  }\n\n  for (let i = 0; i < _area; ++i) {\n    if (_status[i] === STATUS_DEFAULT) {\n      let uCen   = _u[i];\n      let uNorth = _u[i - width];\n      let uSouth = _u[i + width];\n      let uEast  = _u[i + 1];\n      let uWest  = _u[i - 1];\n\n      let uxx = (((uWest  + uEast)  >> 1) - uCen);\n      let uyy = (((uNorth + uSouth) >> 1) - uCen);\n\n      let vel = _v[i] + (uxx >> 1) + (uyy >> 1);\n      vel -= select(vel >> dampingBitShift, 0, dampingBitShift != 0);\n      _v[i] = applyCap(vel);\n    }\n  }\n\n  for (let i = 0; i < _area; ++i) {\n    let stat = _status[i];\n    if (stat === STATUS_DEFAULT) {\n      let f = _force[i];\n      let capped = applyCap(_u[i] + _v[i]);\n      _u[i] = applyCap(f + capped);\n      _force[i] -= (f >> FORCE_DAMPING_BIT_SHIFT);\n    }\n    if (stat === STATUS_WALL) {\n      _image[i] = 0x00000000;\n    } else {\n      _image[i] = toRGB(_u[i]);\n    }\n  }\n}\n"]}